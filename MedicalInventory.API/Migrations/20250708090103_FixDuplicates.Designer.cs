// <auto-generated />
using System;
using MedicalInventory.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalInventory.API.Migrations
{
    [DbContext(typeof(MedicalInventoryDbContext))]
    [Migration("20250708090103_FixDuplicates")]
    partial class FixDuplicates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("MedicalInventory.API.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Purpose")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TargetDepartment")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MedicalInventory.API.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("MedicalInventory.API.Models.MedicalProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsControlled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresAuthorization")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RfidCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StorageConditions")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RfidCode")
                        .IsUnique()
                        .HasDatabaseName("IX_MedicalProducts_RfidCode")
                        .HasFilter("[RfidCode] IS NOT NULL");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasDatabaseName("IX_MedicalProducts_SKU");

                    b.ToTable("MedicalProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BatchNumber = "BATCH-2024-001",
                            Category = 1,
                            ExpirationDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsControlled = false,
                            ManufacturingDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 20,
                            Name = "Bisturí Desechable Estéril",
                            Price = 2.50m,
                            RequiresAuthorization = false,
                            RfidCode = "RFID-BIST-001",
                            SKU = "BIST-001",
                            Stock = 100,
                            StorageConditions = "Ambiente seco, temperatura ambiente"
                        },
                        new
                        {
                            Id = 2,
                            BatchNumber = "BATCH-2024-002",
                            Category = 3,
                            ExpirationDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsControlled = false,
                            ManufacturingDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 100,
                            Name = "Gasas Estériles 10x10cm",
                            Price = 0.75m,
                            RequiresAuthorization = false,
                            RfidCode = "RFID-GASA-001",
                            SKU = "GASA-001",
                            Stock = 500,
                            StorageConditions = "Ambiente seco"
                        },
                        new
                        {
                            Id = 3,
                            BatchNumber = "BATCH-2024-003",
                            Category = 2,
                            ExpirationDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsControlled = true,
                            ManufacturingDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStock = 10,
                            Name = "Morfina 10mg/ml",
                            Price = 15.00m,
                            RequiresAuthorization = true,
                            RfidCode = "RFID-MORF-001",
                            SKU = "MORF-001",
                            Stock = 50,
                            StorageConditions = "Refrigerado 2-8°C, almacén seguro"
                        });
                });

            modelBuilder.Entity("MedicalInventory.API.Models.MedicalProductMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_ProductMovements_ProductId");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_ProductMovements_Timestamp");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ProductMovements_UserId");

                    b.ToTable("MedicalProductMovements");
                });

            modelBuilder.Entity("MedicalInventory.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AccountLockedUntil")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RfidCardCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("RfidCardCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_RfidCardCode")
                        .HasFilter("[RfidCardCode] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Administración",
                            Email = "admin@hospital.com",
                            FailedLoginAttempts = 0,
                            FullName = "Administrador del Sistema",
                            IsActive = true,
                            PasswordHash = "admin123",
                            Role = 5,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Cardiología",
                            Email = "c.garcia@hospital.com",
                            FailedLoginAttempts = 0,
                            FullName = "Dr. Carlos García",
                            IsActive = true,
                            PasswordHash = "doctor123",
                            Role = 1,
                            Username = "doctor.garcia"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Urgencias",
                            Email = "m.lopez@hospital.com",
                            FailedLoginAttempts = 0,
                            FullName = "María López",
                            IsActive = true,
                            PasswordHash = "nurse123",
                            Role = 2,
                            Username = "enfermera.lopez"
                        });
                });

            modelBuilder.Entity("MedicalInventory.API.Models.Cart", b =>
                {
                    b.HasOne("MedicalInventory.API.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalInventory.API.Models.CartItem", b =>
                {
                    b.HasOne("MedicalInventory.API.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalInventory.API.Models.MedicalProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MedicalInventory.API.Models.MedicalProductMovement", b =>
                {
                    b.HasOne("MedicalInventory.API.Models.MedicalProduct", "Product")
                        .WithMany("Movements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalInventory.API.Models.User", "User")
                        .WithMany("ProductMovements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalInventory.API.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MedicalInventory.API.Models.MedicalProduct", b =>
                {
                    b.Navigation("Movements");
                });

            modelBuilder.Entity("MedicalInventory.API.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ProductMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
